{"version":3,"sources":["components/WelcomeMessage.js","ToDoItem.js","todosData.js","App.js","serviceWorker.js","index.js"],"names":["WelcomeMessage","timeOfDay","hours","Date","getHours","ToDoItem","props","className","type","checked","item","completed","onChange","handleChange","id","style","fontStyle","color","textDecoration","text","todosData","App","state","todos","bind","console","log","updatedTodos","this","map","todo","setState","todoItems","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0NAoBeA,MAlBf,WACI,IAEIC,EADEC,GADO,IAAIC,MACEC,WASnB,OANEH,EADEC,EAAQ,GACE,WACHA,GAAS,IAAMA,EAAQ,GACpB,aAEA,WAGV,6BACI,oCAAUD,EAAV,OCOGI,MApBf,SAAkBC,GAQhB,OACE,yBAAKC,UAAU,cACb,2BACEC,KAAK,WACLC,QAASH,EAAMI,KAAKC,UACpBC,SAAU,kBAAMN,EAAMO,aAAaP,EAAMI,KAAKI,OAEhD,uBAAGC,MAAOT,EAAMI,KAAKC,UAdF,CACrBK,UAAW,SACXC,MAAO,OACPC,eAAgB,gBAWmC,MAAOZ,EAAMI,KAAKS,QCW1DC,EA5BG,CACd,CACIN,GAAI,EACJK,KAAM,OACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,SACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,UACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,QACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,MACNR,WAAW,ICyCJU,E,kDA/Cb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,MAAOH,GAET,EAAKP,aAAe,EAAKA,aAAaW,KAAlB,gBALT,E,yDASAV,GACXW,QAAQC,IAAIZ,GAEZ,IAAMa,EAAeC,KAAKN,MAAMC,MAAMM,KAAI,SAAAC,GAKxC,OAJIA,EAAKhB,KAAOA,IACdgB,EAAKnB,WAAamB,EAAKnB,UACvBc,QAAQC,IAAII,IAEPA,KAGTF,KAAKG,SAAS,CAACR,MAAMI,IACrBF,QAAQC,IAAI,UAAWZ,K,+BAQf,IAAD,OACDkB,EAAYJ,KAAKN,MAAMC,MAAMM,KAAI,SAAAnB,GAAI,OACzC,kBAAC,EAAD,CAAUuB,IAAKvB,EAAKI,GAAIJ,KAAMA,EAAMG,aAAc,EAAKA,kBAGzD,OACE,yBAAKN,UAAU,cACb,kBAAC,EAAD,MACA,oDACCyB,O,GAxCSE,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.5bc28760.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction WelcomeMessage(){\n    const date = new Date();\n    const hours = date.getHours();\n    let timeOfDay\n    if (hours < 12){\n      timeOfDay = \"morning,\"\n    } else if (hours >= 12 && hours < 17) {\n      timeOfDay = \"afternoon,\"\n    } else {\n      timeOfDay = \"evening,\"\n    };\n    return (\n        <div>\n            <h1>Good {timeOfDay} </h1>\n        </div>\n    )\n}\n\nexport default WelcomeMessage;","import React from \"react\";\n\nfunction ToDoItem(props) {\n  const completedStyle = {\n    fontStyle: \"italic\",\n    color: \"grey\",\n    textDecoration: \"line-through\"\n  }\n\n\n  return (\n    <div className=\"to-do-item\">\n      <input\n        type=\"checkbox\"\n        checked={props.item.completed}\n        onChange={() => props.handleChange(props.item.id)}\n      />\n      <p style={props.item.completed ? completedStyle: null}>{props.item.text}</p>\n    </div>\n  );\n}\n\nexport default ToDoItem\n","const todosData = [\n    {\n        id: 1,\n        text: \"work\",\n        completed: true\n    },\n    {\n        id: 2,\n        text: \"design\",\n        completed: true\n    },\n    {\n        id: 3,\n        text: \"develop\",\n        completed: true\n    },\n    {\n        id: 4,\n        text: \"sleep\",\n        completed: false\n    },\n    {\n        id: 5,\n        text: \"eat\",\n        completed: false\n    }\n]\n\nexport default todosData","import React, {Component} from 'react';\nimport \"./App.css\"\nimport WelcomeMessage from './components/WelcomeMessage';\nimport ToDoItem from \"./ToDoItem\";\nimport todosData from \"./todosData\";\n\n// function App() {\n\n//   return (\n//     <div>\n//       <WelcomeMessage/>\n//       <MyToDo/>\n//     </div>\n//   );\n// }\n\nclass App extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      todos: todosData\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n  \n\n  handleChange(id) {\n    console.log(id);\n\n    const updatedTodos = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n        console.log(todo)\n      }\n      return todo\n    });\n\n    this.setState({todos:updatedTodos})\n    console.log(\"changed\", id)\n    // const updatedTodos = this.state.todos.map(todo => {\n    //   todo.id === id && (todo.completed = !todo.completed);\n    //   return todo\n    // });\n    // this.setState({todos: updatedTodos})\n  }\n\n  render() {\n    const todoItems = this.state.todos.map(item => (\n      <ToDoItem key={item.id} item={item} handleChange={this.handleChange}/>\n    ))\n\n    return (\n      <div className=\"to-do-list\">\n        <WelcomeMessage/>\n        <h1>Brandon's To Do List</h1>\n        {todoItems}\n      </div>\n    );\n  }\n}\n\n// export default MyToDo\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}